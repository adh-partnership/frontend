name: Check eslint

on:
  push:
    branches: ["main", "dev"]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  eslint:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3.1.0
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-depedency-path: yarn.lock
      - name: Install dependencies
        run: yarn install --immutable
      - name: Run eslint
        run: yarn lint
      - name: Test build
        run: yarn build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: eslint
    steps:
    - uses: actions/checkout@v3
      name: Checkout repo
    - name: Set sha_short
      id: vars
      run: |-
        echo "sha_short=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
        # Set default branch name for PRs, as we still want to test build an image on PRs
        # but we have no branch to set a tag for.
        branch="test"
        if [[ "$GITHUB_REF" == "refs/heads/"* ]]; then
          branch="${GITHUB_REF#refs/heads/}"
        fi
        echo "branch=${branch}" >> $GITHUB_ENV
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Install cosign
      uses: sigstore/cosign-installer@main
    - name: Build Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/zdv-frontend:${{ env.branch }}-${{ env.sha_short }} -t ${{ secrets.DOCKER_USERNAME }}/zdv-frontend:${{ env.branch }} .
    - name: Push Image
      if: ${{ github.event_name == 'push' }}
      run: |
        docker push --all-tags ${{ secrets.DOCKER_USERNAME }}/zdv-frontend
    - name: Sign image
      if: ${{ github.event_name == 'push' }}
      env:
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PRIVATE_KEY_PASSWORD }}
        COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
      run: |
        image_digest_sha=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ secrets.DOCKER_USERNAME }}/zdv-frontend:${{ env.branch }}-${{ env.sha_short }})
        image_digest_branch=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ secrets.DOCKER_USERNAME }}/zdv-frontend:${{ env.branch }})
        cosign sign --key env://COSIGN_PRIVATE_KEY $image_digest_sha $image_digest_branch
